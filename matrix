#include <iostream>
using namespace std;

template <typename T>
class Matrix {
private:
    int rows, columns;
    double** m_val;
public:
    Matrix() { //конструктор по умолчанию
        rows = 0;
        columns = 0;
        m_val = 0;
    }

    Matrix(int Rows, int Columns) { //конструктор для матрицы любого размера
        rows = Rows;
        columns = Columns;
        m_val = new double* [rows];
        for (int i = 0; i < rows; i++) {
            m_val[i] = new double[columns];
            for (int j = 0; j < columns; j++) {
                m_val[i][j] = 0;
            }
        }
    }

    Matrix(int size) { //конструктор для квадратной матрицы
        rows = columns = size;
        m_val = new double* [rows];
        for (int i = 0; i < rows; i++) {
            m_val[i] = new double[columns];
            for (int j = 0; j < columns; j++) {
                m_val[i][j] = 0;
            }
        }
    }

    Matrix(const Matrix& matrix) { //конструктор копирования
        rows = matrix.rows;
        columns = matrix.columns;
        m_val = new double* [rows];
        for (int i = 0; i < rows; i++) {
            m_val[i] = new double[columns];
            for (int j = 0; j < columns; j++) {
                m_val[i][j] = matrix.m_val[i][j];
            }
        }
    }

    ~Matrix() { // деструктор
        for (int i = 0; i < rows; i++) {
            delete[]m_val[i];
        }
        delete[]m_val;
    }

    friend istream& operator>> (istream& file_in, Matrix& matrix) { //чтение из потока
        for (int i = 0; i < matrix.rows; i++) {
            for (int j = 0; j < matrix.columns; j++) {
                file_in >> matrix.m_val[i][j];
            }
        }
        return file_in;
    }

    friend ostream& operator<< (ostream& file_out, const Matrix& matrix) { //вывод объекта в поток
        for (int i = 0; i < matrix.rows; i++) {
            for (int j = 0; j < matrix.columns; j++) {
                cout << matrix.m_val[i][j] << " ";
            }
            cout << endl;
        }
        return cout;
    }

   //friend ostream& operator<< (ostream& file_out, const Matrix& matrix) {
   //     for (int i = 0; i < matrix.rows; i++) {
   //         for (int j = 0; j < matrix.columns; j++) {
   //             file_out << matrix.m_val[i][j] << " ";
     //       }
    //        file_out << endl;
    //    }
     //   return file_out;
   // }

    void swap(int& a, int& b) {
        int t = a;
        a = b;
        b = t;
    }


    Matrix& operator= (const Matrix& matrix) { //операция присваивания
        this -> ~Matrix();
        Matrix<int> matrix_temp(matrix.rows, matrix.columns);
        swap(this->rows, matrix_temp.rows);
        swap(this->columns, matrix_temp.columns);
        this->m_val=matrix.m_val;
        return *this;
    }

    bool operator== (const Matrix& matrix) { //сравнение
        if (rows == matrix.rows && columns == matrix.columns) {
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    if (m_val[i][j] != matrix.m_val[i][j])
                        return false;
                }
            }
            return true;
        }
        else
            return false;
    }

    bool operator!= (const Matrix& matrix) { //не равно
        return (!(*this==matrix));
    }

   // bool operator> (const Matrix& matrix) { //не равно
    //    return (!(*this == matrix));
   // }


};










int main()
{
    Matrix<int> A(2, 3);
    cin >> A;
    cout << A;
    Matrix<int> B(2);
    cin >> B;
    cout << B;
    cout << endl;
    cout << (A == B);
    cout << endl;
    B = A;
    cout << B;
    cout << endl;
    cout << (A == B);
    return 0;
}
