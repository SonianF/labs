#include <iostream>
using namespace std;

int const error_const = -31;

class Matrix {
private:
    int rows, columns;
    double** m_val;
public:
    Matrix() { //конструктор по умолчанию
        rows = 0;
        columns = 0;
        m_val = 0;
    }

    Matrix(int Rows, int Columns) { //конструктор для матрицы любого размера
        rows = Rows;
        columns = Columns;
        m_val = new double* [rows];
        for (int i = 0; i < rows; i++) {
            m_val[i] = new double[columns];
            for (int j = 0; j < columns; j++) {
                m_val[i][j] = 0;
            }
        }
    }

    Matrix(int size) { //конструктор для квадратной матрицы
        rows = columns = size;
        m_val = new double* [rows];
        for (int i = 0; i < rows; i++) {
            m_val[i] = new double[columns];
            for (int j = 0; j < columns; j++) {
                m_val[i][j] = 0;
            }
        }
    }

    Matrix(const Matrix& matrix) { //конструктор копирования
        rows = matrix.rows;
        columns = matrix.columns;
        m_val = new double* [rows];
        for (int i = 0; i < rows; i++) {
            m_val[i] = new double[columns];
            for (int j = 0; j < columns; j++) {
                m_val[i][j] = matrix.m_val[i][j];
            }
        }
    }

    ~Matrix() { // деструктор
        for (int i = 0; i < rows; i++) {
            delete[]m_val[i];
        }
        delete[]m_val;
    }

    friend istream& operator>> (istream& file_in, Matrix& matrix) { //чтение из потока
        for (int i = 0; i < matrix.rows; i++) {
            for (int j = 0; j < matrix.columns; j++) {
                file_in >> matrix.m_val[i][j];
            }
        }
        return file_in;
    }

    friend ostream& operator<< (ostream& file_out, const Matrix& matrix) { //вывод объекта в поток
        for (int i = 0; i < matrix.rows; i++) {
            for (int j = 0; j < matrix.columns; j++) {
                cout << matrix.m_val[i][j] << " ";
            }
            cout << endl;
        }
        return cout;
    }

   //friend ostream& operator<< (ostream& file_out, const Matrix& matrix) {
   //     for (int i = 0; i < matrix.rows; i++) {
   //         for (int j = 0; j < matrix.columns; j++) {
   //             file_out << matrix.m_val[i][j] << " ";
     //       }
    //        file_out << endl;
    //    }
     //   return file_out;
   // }

    void swap(int& a, int& b) {
        int t = a;
        a = b;
        b = t;
    }


    /*Matrix& operator= (const Matrix& matrix) { //операция присваивания
        this -> ~Matrix();
        Matrix matrix_temp(matrix);
        swap(this->rows, matrix_temp.rows);
        swap(this->columns, matrix_temp.columns);
                double **ptr = this->m_val;
                this->m_val = matrix_temp.m_val;
                matrix_temp.m_val = ptr;
        return *this;
    }*/

    Matrix& operator= (const Matrix& matrix) { //операция присваивания
        this -> ~Matrix();
        rows = matrix.rows;
        columns = matrix.columns;
        m_val = new double* [rows];
        for (int i = 0; i < rows; i++) {
            m_val[i] = new double[columns];
            for (int j = 0; j < columns; j++) {
                m_val[i][j] = matrix.m_val[i][j];
            }
        }
        return *this;
    }

    bool operator== (const Matrix& matrix) { //сравнение
        if (rows == matrix.rows && columns == matrix.columns) {
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    if (m_val[i][j] != matrix.m_val[i][j])
                        return false;
                }
            }
            return true;
        }
        else
            return false;
    }

    bool operator!= (const Matrix& matrix) { //не равно
        return (!(*this==matrix));
    }

    Matrix operator+ (const Matrix & matrix) { //сложение матриц равного размера
        if (rows == matrix.rows && columns == matrix.columns) {
            Matrix result(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    result.m_val[i][j] = m_val[i][j] + matrix.m_val[i][j];
                }
            }
            return result;

        }
        else
            return error_const;
    }

    Matrix operator- (const Matrix& matrix) { //вычитание матриц равного размера
        if (rows == matrix.rows && columns == matrix.columns) {
            Matrix result(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    result.m_val[i][j] = m_val[i][j] - matrix.m_val[i][j];
                }
            }
            return result;

        }
        else
            return error_const;
    }

    Matrix operator* (const Matrix& matrix) { //умножение матриц
        if (columns == matrix.rows) {
            Matrix result(rows, matrix.columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < matrix.columns; j++) {
                    for (int s = 0; s < columns; s++) {
                        result.m_val[i][j] += m_val[i][s] * matrix.m_val[s][j];
                    }

                }
            }
            return result;
        }
        else
            return error_const;
    }

    // Matrix operator/ (const Matrix& matrix) //деление матриц

    Matrix operator* (const double num) { //умножение матрицы на число
            Matrix result(rows, columns);
            for (int i = 0; i < rows; i++) {
                    for (int s = 0; s < columns; s++) {
                        result.m_val[i][s] = m_val[i][s] * num;
                }
            }
            return result;
    }

    Matrix operator/ (const double num) { //деление матрицы на число
        if (num != 0) {
            Matrix result(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int s = 0; s < columns; s++) {
                    result.m_val[i][s] = m_val[i][s] / num;
                }
            }
            return result;
        }
        else 
            return error_const;
    }

    int trace_matrix(const Matrix& matrix) { //след матрицы
        int result=0;
        if (rows == columns) {
            for (int i = 0; i < rows; i++) {
                result += m_val[i][i];
            }
        }
        else
            result = error_const;
        return result;
    }

    double determinal() { //определитель квадратной матрицы
        double result;
        if (rows == columns) {
            if (rows == 1)
                result = m_val[0][0];
            if (rows == 2)
                result = (m_val[0][0] * m_val[1][1]) - (m_val[0][1] * m_val[1][0]);
            if (rows == 3) {
                int sum_plus, sum_minus;
                sum_plus = (m_val[0][0] * m_val[1][1] * m_val[2][2]) + (m_val[0][1] * m_val[1][2] * m_val[2][0]) + (m_val[0][2] * m_val[1][0] * m_val[2][1]);
                sum_minus = (m_val[2][0] * m_val[1][1] * m_val[0][2]) + (m_val[0][1] * m_val[1][0] * m_val[2][2]) + (m_val[0][0] * m_val[1][2] * m_val[2][1]);
                result = sum_plus - sum_minus;
            }

        }
        else
            result = error_const;
        return result;
    }

    bool operator> (Matrix& matrix) { //строго больше
        if (this->determinal() > matrix.determinal())
            return 1;
        else
            return 0;
    }

    bool operator>= (Matrix& matrix) { //больше или равно
        if (this->determinal() >= matrix.determinal())
            return 1;
        else
            return 0;
    }

    bool operator< (Matrix& matrix) { // строго меньше
        if (this->determinal() < matrix.determinal())
            return 1;
        else
            return 0;
    }
    
    bool operator<= (Matrix& matrix) { //меньше или равно
        if (this->determinal() <= matrix.determinal())
            return 1;
        else
            return 0;
    }

    Matrix Transpose() //транспонирование матрицы
    {
        Matrix result(columns, rows);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result.m_val[j][i] = m_val[i][j];
            }
        }
        return result;
    }

};




int main()
{
    Matrix A(2);
    cin >> A;
    cout << A << endl;
    cout << A.Transpose();
    cout << A.determinal();
    Matrix B(2);
    cin >> B;
    cout << B << endl;
    cout << (A<=B);
    return 0;
}
